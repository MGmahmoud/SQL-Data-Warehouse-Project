/*
===============================================================================
Dimensions Exploration
===============================================================================
Purpose:
    - To explore the structure and content of the dimension tables.
	
SQL Concepts Used:
    - DISTINCT
    - ORDER BY
===============================================================================
*/

-- ============================================================================
-- Explore all countries our customers come from
-- ============================================================================
SELECT 
    DISTINCT country 
FROM 
    gold.dim_customers;


-- ============================================================================
-- Explore product categories, subcategories, and product names
-- ============================================================================
SELECT 
    DISTINCT 
        category,        -- Major division
        subcategory, 
        product_name
FROM 
    gold.dim_products
ORDER BY 
    category, 
    subcategory, 
    product_name;



-- Find the date of the first and last order
-- How many years of sales are avilable ?
SELECT
	MIN(order_date) AS first_order_date,
    MAX(order_date) AS last_order_date,
    DATEDIFF(YEAR, MIN(order_date), MAX(order_date)) AS order_range_years
FROM 
    gold.fact_sales;

-- Find the youngest and the oldest customer
SELECT
	MAX(birthdate) AS youngest_birthdate,
	MIN(DATEDIFF(YEAR, birthdate, GETDATE())) AS youngest_age,
	MIN(birthdate) AS oldest_birthdate,
	MAX(DATEDIFF(YEAR, birthdate, GETDATE())) AS oldest_age
FROM
	gold.dim_customers





-- Find the total sales
SELECT SUM(sales_amount) AS total_sales FROM gold.fact_sales;

-- Find how many items are sold
SELECT SUM(quantity) AS total_quantity FROM gold.fact_sales;

-- Find the average selling price
SELECT AVG(price) AS avg_price FROM gold.fact_sales;

-- Find the total number of orders
SELECT COUNT(order_number) AS total_orders FROM gold.fact_sales;
SELECT COUNT(DISTINCT order_number) AS total_orders FROM gold.fact_sales;

-- Find the total number of products
SELECT COUNT(product_key) AS total_products FROM gold.dim_products
SELECT COUNT(DISTINCT product_key) AS total_products FROM gold.dim_products

-- Find the total number of customers
SELECT COUNT(customer_key) AS total_customers FROM gold.dim_customers;
SELECT COUNT(DISTINCT customer_key) AS total_customers FROM gold.dim_customers;

-- Find the total number of customers that has placed an order
SELECT COUNT(customer_key) AS total_customers_ordered FROM gold.fact_sales;
SELECT COUNT(DISTINCT customer_key) AS total_customers_ordered FROM gold.fact_sales;

-- Generate a report that shows all the metrics of the business
SELECT 'Total Sales' AS measure_name, SUM(sales_amount) AS measure_value FROM gold.fact_sales
UNION ALL 
SELECT 'Total Quantity' AS measure_name, SUM(quantity) AS measure_value FROM gold.fact_sales
UNION ALL 
SELECT 'Average Price' AS measure_name, AVG(price) AS measure_value FROM gold.fact_sales
UNION ALL 
SELECT 'Total Nr. Orders' AS measure_name, COUNT(DISTINCT order_number) AS measure_value FROM gold.fact_sales
UNION ALL 
SELECT 'Total Nr. Products' AS measure_name, COUNT(DISTINCT product_key) AS measure_value FROM gold.dim_products
UNION ALL 
SELECT 'Total Nr. Customers' AS measure_name, COUNT(DISTINCT customer_key) AS measure_value FROM gold.dim_customers





-- Find total customers by countries
SELECT
	country,
	COUNT(DISTINCT customer_key) AS total_customers
FROM gold.dim_customers
GROUP BY country
ORDER BY total_customers DESC

-- Find total customers by gender
SELECT
	gender,
	COUNT(DISTINCT customer_key) AS total_customers
FROM gold.dim_customers
GROUP BY gender
ORDER BY total_customers DESC

-- Find total products by category
SELECT
	category,
	COUNT(DISTINCT product_key) AS total_products
FROM gold.dim_products
GROUP BY category
ORDER BY total_products DESC

-- What is the average cost in each category?
SELECT
	category,
	AVG(product_cost) AS avg_cost
FROM gold.dim_products
GROUP BY category
ORDER BY avg_cost DESC

-- What is the total revenue generated for each category?
SELECT
	p.category,
	SUM(f.sales_amount) AS total_revenue
FROM gold.fact_sales f
LEFT JOIN gold.dim_products p
ON f.product_key = p.product_key
GROUP BY p.category
ORDER BY total_revenue DESC

-- Find total revenu generated by each customer
SELECT
	c.customer_key,
	c.first_name + ' ' + c.last_name AS customer_name ,
	SUM(f.sales_amount) AS total_revenue
FROM gold.fact_sales f
LEFT JOIN gold.dim_customers c
ON f.customer_key = c.customer_key
GROUP BY c.customer_key, c.first_name + ' ' + c.last_name
ORDER BY total_revenue DESC

-- What is the distribuation of sold items across contries?
SELECT
	c.country,
	SUM(f.quantity) AS total_quantity_sold
FROM gold.fact_sales f
LEFT JOIN gold.dim_customers c
ON f.customer_key = c.customer_key
GROUP BY c.country
ORDER BY total_quantity_sold DESC







-- Which 5 products generate the highest revenue?
SELECT TOP 5
	p.product_name,
	SUM(f.sales_amount) AS total_revenue
FROM gold.fact_sales f
LEFT JOIN gold.dim_products p
ON f.product_key = p.product_key
GROUP BY p.product_name
ORDER BY total_revenue DESC

-- What are the 5 worst-performing products in terms of sales
SELECT TOP 5
	p.product_name,
	SUM(f.sales_amount) AS total_revenue
FROM gold.fact_sales f
LEFT JOIN gold.dim_products p
ON f.product_key = p.product_key
GROUP BY p.product_name
ORDER BY total_revenue ASC

-- Find the top 10 customers who have generated the highest revenue
SELECT 
*
FROM
(
	SELECT
		ROW_NUMBER() OVER (ORDER BY SUM(f.sales_amount) DESC) AS rank_customers,
		c.first_name + ' ' + c.last_name AS customer_name,
		SUM(f.sales_amount) AS total_revenue
	FROM gold.fact_sales f
	LEFT JOIN gold.dim_customers c
	ON f.customer_key = c.customer_key
	GROUP BY c.first_name + ' ' + c.last_name 
) AS t
WHERE rank_customers <= 5

 -- Using Top N
SELECT TOP 5
	c.first_name + ' ' + c.last_name AS customer_name,
	SUM(f.sales_amount) AS total_revenue
FROM gold.fact_sales f
	LEFT JOIN gold.dim_customers c
	ON f.customer_key = c.customer_key
GROUP BY c.first_name + ' ' + c.last_name 
ORDER BY total_revenue DESC


-- The 3 customers with the fewest orders placed
SELECT 
*
FROM
(
	SELECT
		ROW_NUMBER() OVER (ORDER BY COUNT(DISTINCT f.order_number) ASC) AS rank_customers,
		c.first_name + ' ' + c.last_name AS customer_name,
		COUNT(DISTINCT f.order_number) AS total_orders
	FROM gold.fact_sales f
	LEFT JOIN gold.dim_customers c
	ON f.customer_key = c.customer_key
	GROUP BY c.first_name + ' ' + c.last_name 
) AS t
WHERE rank_customers <= 3

 -- Using Top N
SELECT TOP 3
		c.first_name + ' ' + c.last_name AS customer_name,
		COUNT(DISTINCT f.order_number) AS total_orders
FROM gold.fact_sales f
	LEFT JOIN gold.dim_customers c
	ON f.customer_key = c.customer_key
GROUP BY c.first_name + ' ' + c.last_name 
ORDER BY total_orders ASC


